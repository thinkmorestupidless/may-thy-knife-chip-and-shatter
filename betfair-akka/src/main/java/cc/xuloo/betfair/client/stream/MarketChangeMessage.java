/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * OpenAPI spec version: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package cc.xuloo.betfair.client.stream;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Value;

import java.util.List;


/**
 * MarketChangeMessage
 */
@Value
public class MarketChangeMessage implements ResponseMessage  {

    /**
     * Change Type - set to indicate the type of change - if null this is a delta)
     */
    public enum CtEnum {

        SUB_IMAGE("SUB_IMAGE"),
        RESUB_DELTA("RESUB_DELTA"),
        HEARTBEAT("HEARTBEAT");

        private String value;

        CtEnum(String value) {
          this.value = value;
        }

        @Override
        public String toString() {
        return String.valueOf(value);
      }
    }

    /**
     * Segment Type - if the change is split into multiple segments, this denotes the beginning and end of a change, and segments in between. Will be null if data is not segmented
     */
    public enum SegmentTypeEnum {

        SEG_START("SEG_START"),
        SEG("SEG"),
        SEG_END("SEG_END");

        private String value;

        SegmentTypeEnum(String value) {
          this.value = value;
        }

        @Override
        public String toString() {
        return String.valueOf(value);
      }
    }

    /**
     * Client generated unique id to link request with response (like json rpc)
     * @return id
     **/
    private final Integer id;

    /**
    * Change Type - set to indicate the type of change - if null this is a delta)
    * @return ct
    **/
    private final CtEnum ct;

    /**
    * Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)
    * @return clk
    **/
    private final String clk;

    /**
    * Heartbeat Milliseconds - the heartbeat rate (may differ from requested: bounds are 500 to 30000)
    * @return heartbeatMs
    **/
    private final Long heartbeatMs;

    /**
    * Publish Time (in millis since epoch) that the changes were generated
    * @return pt
    **/
    private final Long pt;

    /**
    * Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)
    * @return initialClk
    **/
    private final String initialClk;

    /**
    * MarketChanges - the modifications to markets (will be null on a heartbeat
    * @return mc
    **/
    private final List<MarketChange> mc;

    /**
    * Conflate Milliseconds - the conflation rate (may differ from that requested if subscription is delayed)
    * @return conflateMs
    **/
    private final Long conflateMs;

    /**
    * Segment Type - if the change is split into multiple segments, this denotes the beginning and end of a change, and segments in between. Will be null if data is not segmented
    * @return segmentType
    **/
    private final SegmentTypeEnum segmentType;

    /**
    * Stream status: set to null if the exchange stream data is up to date and 503 if the downstream services are experiencing latencies
    * @return status
    **/
    private final Integer status;

    public MarketChangeMessage(@JsonProperty("id") Integer id,
                               @JsonProperty("ct") CtEnum ct,
                               @JsonProperty("clk") String clk,
                               @JsonProperty("heartbeatMs") Long heartbeatMs,
                               @JsonProperty("pt") Long pt,
                               @JsonProperty("initialClk") String initialClk,
                               @JsonProperty("mc") List<MarketChange> mc,
                               @JsonProperty("conflateMs") Long conflateMs,
                               @JsonProperty("segmentType") SegmentTypeEnum segmentType,
                               @JsonProperty("status") Integer status) {
        this.id = id;
        this.ct = ct;
        this.clk = clk;
        this.heartbeatMs = heartbeatMs;
        this.pt = pt;
        this.initialClk = initialClk;
        this.mc = mc;
        this.conflateMs = conflateMs;
        this.segmentType = segmentType;
        this.status = status;
    }
}

